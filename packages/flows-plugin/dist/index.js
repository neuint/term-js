import{Plugin as t}from"@neuint/term-js";import{noop as s,get as i}from"lodash-es";class e extends t{constructor(){super(...arguments),this.flowsField={},this.step=0,this.branchData={},this.isWaiting=!1,this.clear=s,this.onSubmit=t=>{let{branch:s,flows:i,branchData:e,isWaiting:r}=this;if(r)return;let h=t.typedValue||"";if(s){const{handler:t=(()=>Promise.resolve()),variableName:i}=s[this.step];i&&(e[i]=h);const r=t(e);return r&&(this.isWaiting=!0),void(r||Promise.resolve(void 0)).then(this.onStepResult)}h=h.trim(),s=i[h],s&&(this.step=0,this.branch=s,this.branchData={},this.showStep())},this.onStepResult=t=>{const{to:s,duration:i,data:e,withSubmit:r}=t||{};if(s){const[t,i]=s.split("|");this.step=parseInt(t,10),this.branch=i?this.flows[i]:this.branch}else this.step+=1;const h=e?this.termInfo.write(e,{duration:i,withSubmit:r}):void 0;(h instanceof Promise?h:Promise.resolve(!0)).then((()=>{this.showStep()}))},this.showStep=()=>{const{branch:t,step:s}=this;if(this.isWaiting=!1,t.length-1<s)return this.branch=void 0,this.step=0,void(this.branchData={});const{write:i,onEnter:e,secret:r=!1}=t[s],{data:h}=i||{},n=h?this.termInfo.write(h,i):void 0;(n instanceof Promise?n:Promise.resolve(!0)).then((()=>{this.termInfo.secret(r)})),e&&e(this.branchData)}}get flows(){return this.flowsField}set flows(t){this.flowsField=t,this.runAutoStartBranch()}setTermInfo(t,s){super.setTermInfo(t,s),this.termInfo.addEventListener("submit",this.onSubmit),this.runAutoStartBranch()}runAutoStartBranch(){const{flows:t,termInfo:s,branch:e}=this;if(!s||e)return;const r=Object.keys(t).find((s=>i(t[s],"0.autostart")));r&&(this.step=0,this.branch=t[r],this.branchData={},this.showStep())}}export{e as default};
